"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const buildPluginAsset_1 = require("./buildPluginAsset");
const config_1 = require("./config");
const utils_1 = require("./utils");
const debug = require('debug')('vite:build:css');
const urlRE = /(url\(\s*['"]?)([^"')]+)(["']?\s*\))/;
exports.createBuildCssPlugin = (root, publicBase, assetsDir, cssFileName, minify, inlineLimit) => {
    const styles = new Map();
    const assets = new Map();
    return {
        name: 'vite:css',
        async transform(css, id) {
            if (id.endsWith('.css')) {
                // process url() - register referenced files as assets
                // and rewrite the url to the resolved public path
                if (urlRE.test(css)) {
                    const fileDir = path_1.default.dirname(id);
                    let match;
                    let remaining = css;
                    let rewritten = '';
                    while ((match = urlRE.exec(remaining))) {
                        rewritten += remaining.slice(0, match.index);
                        const [matched, before, rawUrl, after] = match;
                        if (utils_1.isExternalUrl(rawUrl)) {
                            rewritten += matched;
                            remaining = remaining.slice(match.index + matched.length);
                            return;
                        }
                        const file = path_1.default.join(fileDir, rawUrl);
                        const { fileName, content, url } = await buildPluginAsset_1.resolveAsset(file, publicBase, assetsDir, inlineLimit);
                        assets.set(fileName, content);
                        debug(`url(${rawUrl}) -> url(${url})`);
                        rewritten += `${before}${url}${after}`;
                        remaining = remaining.slice(match.index + matched.length);
                    }
                    css = rewritten + remaining;
                }
                // postcss
                let modules;
                const postcssConfig = await config_1.loadPostcssConfig(root);
                const expectsModule = id.endsWith('.module.css');
                if (postcssConfig || expectsModule) {
                    try {
                        const result = await require('postcss')([
                            ...((postcssConfig && postcssConfig.plugins) || []),
                            ...(expectsModule
                                ? [
                                    require('postcss-modules')({
                                        getJSON(_, json) {
                                            modules = json;
                                        }
                                    })
                                ]
                                : [])
                        ]).process(css, {
                            ...(postcssConfig && postcssConfig.options),
                            from: id
                        });
                        css = result.css;
                    }
                    catch (e) {
                        console.error(`[vite] error applying postcss transforms: `, e);
                    }
                }
                styles.set(id, css);
                return modules
                    ? `export default ${JSON.stringify(modules)}`
                    : '/* css extracted by vite */';
            }
        },
        async generateBundle(_options, bundle) {
            let css = '';
            // finalize extracted css
            styles.forEach((s) => {
                css += s;
            });
            // minify with cssnano
            if (minify) {
                css = (await require('postcss')([require('cssnano')]).process(css, {
                    from: undefined
                })).css;
            }
            bundle[cssFileName] = {
                isAsset: true,
                type: 'asset',
                fileName: cssFileName,
                source: css
            };
            buildPluginAsset_1.registerAssets(assets, bundle);
        }
    };
};
