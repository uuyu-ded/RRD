"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const slash_1 = __importDefault(require("slash"));
const fs_1 = require("fs");
const defaultRequestToFile = (publicPath, root) => path_1.default.join(root, publicPath.slice(1));
const defaultFileToRequest = (filePath, root) => `/${slash_1.default(path_1.default.relative(root, filePath))}`;
const defaultIdToRequest = (id) => {
    if (id.startsWith('@') && id.indexOf('/') < 0) {
        return `/${id}`;
    }
};
const queryRE = /\?.*$/;
const ensureJs = (id) => {
    const cleanId = id.replace(queryRE, '');
    if (!/\.\w+$/.test(cleanId)) {
        // try to see if there is actually a corresponding .js file on disk.
        // if not, return the id as-is
        try {
            fs_1.statSync(cleanId + '.js');
        }
        catch (e) {
            return id;
        }
        const queryMatch = id.match(queryRE);
        const query = queryMatch ? queryMatch[0] : '';
        return cleanId + '.js' + query;
    }
    return id;
};
function createResolver(root, resolvers) {
    return {
        requestToFile: (publicPath) => {
            let resolved;
            for (const r of resolvers) {
                const filepath = r.requestToFile(publicPath, root);
                if (filepath) {
                    resolved = filepath;
                    break;
                }
            }
            if (!resolved) {
                resolved = defaultRequestToFile(publicPath, root);
            }
            resolved = ensureJs(resolved);
            return resolved;
        },
        fileToRequest: (filePath) => {
            for (const r of resolvers) {
                const request = r.fileToRequest(filePath, root);
                if (request)
                    return request;
            }
            return defaultFileToRequest(filePath, root);
        },
        idToRequest: (id) => {
            for (const r of resolvers) {
                const request = r.idToRequest && r.idToRequest(id);
                if (request)
                    return request;
            }
            return defaultIdToRequest(id);
        }
    };
}
exports.createResolver = createResolver;
