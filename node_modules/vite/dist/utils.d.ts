/// <reference types="node" />
import { Context } from 'koa';
import { Readable } from 'stream';
export declare const isExternalUrl: (url: string) => boolean;
/**
 * Check if a file is a static asset that vite can process.
 */
export declare const isStaticAsset: (file: string) => boolean;
/**
 * Check if a request is an import from js (instead of fetch() or ajax requests)
 * A request qualifies as long as it's not from page (no ext or .html).
 * this is because non-js files can be transformed into js and import json
 * as well.
 */
export declare const isImportRequest: (ctx: Context) => boolean;
export declare const queryRE: RegExp;
export declare const hashRE: RegExp;
export declare const cleanUrl: (url: string) => string;
/**
 * Read a file with in-memory cache.
 * Also sets approrpriate headers and body on the Koa context.
 */
export declare function cachedRead(ctx: Context | null, file: string): Promise<string>;
/**
 * Read already set body on a Koa context and normalize it into a string.
 * Useful in post-processing middlewares.
 */
export declare function readBody(stream: Readable | Buffer | string | null): Promise<string | null>;
